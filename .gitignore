# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Build outputs
dist/
build/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE
.vscode/
.idea/
*.swp
*.swo

# DevContainer (development environment specific)
.devcontainer/

# Logs
logs
*.log

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# CLAUDE
claude.md
CLAUDE.md

# Test outputs
playwright-report/
test-results/

# Extension builds
extension.tar


Gistによるストレージ処理を抜本的に修正します。

## マージ処理は行わない
リモート側を正として、コンフリクトが発生した場合はアラートを出して、ローカル側の変更を破棄します。

## lastModifiedを使用しない
Gistコンテンツ中にlastModifiedを保存しません。修正の有無やバージョンの確認はGistが提供するetag、commitエンドポイント、レスポンス中のhistoryを使用します。

## リモート更新有無の確認
Gistの更新有無は、etagを使用して確認します。これはIf-None-Matchヘッダを使用して、リモートのGistが更新されていないかを確認します。
一定感覚（数秒）でリモートのGistを確認し、更新があればsyncを行いローカル環境に反映します。

## Sync(下り)
Gistの内容を取得し、ローカル環境に反映します。この際、ローカルが修正されている場合は、アラートを出してローカルの変更を破棄します。
この際、コンテンツのetagとshaは保存しておきます。etagはリモート更新の有無の確認に使用します。

## Sync(上り)
以下の手順でGistの内容を更新します。

1. GET /gists/{id} Header If‑None‑Match: "etag" により、リモートのGistが更新されていないかを確認します。
    - 更新されている場合はコンフリクトが発生しているため、アラートを出してローカルの変更を破棄します。
2. PATCH /gists/{id} でgistの内容を更新します。この際更新した内容のetagとshaを保存します。
3. GET   /gists/{id}/commits?per_page=2 で最新のコミット情報を取得します。
    - ここで、取得したコミット情報から、1.で保存したshaと2で取得した最新のsha連続しているかを確認します。
    - 連続していない場合は、コンフリクトが発生しているため、アラートを出します。ユーザーに対してGistの内容を確認してもらい、必要に応じて手動で修正を行うよう促します。